'''
def messageCommand(handle, package):
    e = keywords$('engine', none)
    i = keywords$('self', none)

    self = i or namespace \
        (engine = e or handle.Engine(), \
         dataChannel = keywords$('dataChannel, none) or \
            handle.encoding.EntitySpace())

    if is$none(i):
        # New peerish initialization.
        self.mode = i.engine.application.InitialMode()
        self.messenger = messageCommand.action(handle)
        self.send = action(handle.CommandMessage.handleIncomingPackage, self)

    if is$not$none(self):
        return self.send(none, package)

newMessageCommand = messageCommand.action \
    ('kernel/lookup$seq'(handle.value)) \

    <- handle:
        - using
        - m6ab56a49c6d24ef54ee1cd19316f9a6ff9ab6fb528d26898911cbc7789445633
        - messaging


# .space = newMessageCommand('')
# .space.send(.space.dataChannel.packMessage(true))

'''

from m6ab56a49c6d24ef54ee1cd19316f9a6ff9ab6fb528d26898911cbc7789445633 \
    .messaging import Engine, Command # , Application

# getSystemException

class CommandMessage(Engine.Message):
    def __init__(self, peer, mode, command):
        self.peer = peer
        self.mode = mode
        self.command = command

    def __repr__(self):
        return '<%s: %r>' % (self.__class__.__name__,
                             self.command)

    @classmethod
    def handleIncomingPackage(cls, self, peer, package):
        cmd = Command.FromPackage(package, self.dataChannel)
        if cmd is not None:
            self.engine.postMessage \
                (cls(peer, self.mode, cmd))

        return self

    def dispatch(self, engine):
        with engine.Controller(self.peer):
            # The client kwd names could interfere with the actual method params.
            try: response = self.mode.interpretCommand \
                (engine, self.peer, self.cmd.command,
                 *self.cmd.args, **self.cmd.kwd)

            except self.peer.ResponseDeferred as e:
                d = e.bind(self.peer, self.cmd)
                if e.tracked:
                    nr = self.cmd.serialId
                    assert nr is not None
                    assert nr not in self.peer.deferred_response
                    self.peer.deferred_response[nr] = d

            except:
                self.peer.handleCommandException \
                    (engine, self.cmd, getSystemException())
                self.peer.interruptTimeout()

            else:
                self.peer.handleCommandResponse \
                    (engine, self.cmd, response)
                self.peer.interruptTimeout()
